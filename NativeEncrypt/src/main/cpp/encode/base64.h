
#ifndef ENCRYPTUTIL_BASE64_H
#define ENCRYPTUTIL_BASE64_H

#endif //ENCRYPTUTIL_BASE64_H

# include <stddef.h>
#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>

static const int B64_LINE_LENGTH = 76;
static const int LINE_GROUPS = 19;
static const char CRLF_CR = '\r';
static const char CRLF_LF = '\n';
static const char PADDING_CHAR = '=';

/**
 * Base64 index table.
 */
static const unsigned char data_bin2ascii[65] =
        "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";

static const unsigned char data_ascii2bin[128] = {
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xE0, 0xF0, 0xFF, 0xFF, 0xF1, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xE0, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0x3E, 0xFF, 0xF2, 0xFF, 0x3F,
        0x34, 0x35, 0x36, 0x37, 0x38, 0x39, 0x3A, 0x3B,
        0x3C, 0x3D, 0xFF, 0xFF, 0xFF, 0x00, 0xFF, 0xFF,
        0xFF, 0x00, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06,
        0x07, 0x08, 0x09, 0x0A, 0x0B, 0x0C, 0x0D, 0x0E,
        0x0F, 0x10, 0x11, 0x12, 0x13, 0x14, 0x15, 0x16,
        0x17, 0x18, 0x19, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0x1A, 0x1B, 0x1C, 0x1D, 0x1E, 0x1F, 0x20,
        0x21, 0x22, 0x23, 0x24, 0x25, 0x26, 0x27, 0x28,
        0x29, 0x2A, 0x2B, 0x2C, 0x2D, 0x2E, 0x2F, 0x30,
        0x31, 0x32, 0x33, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
};

#ifdef __cplusplus
extern "C" {
#endif

/**
 * 在使用Base64编码函数b64_encode()之前，该函数可以为函数调用者预先算出
 * 存放编码结果的缓冲区大小
 * @return 所需存放base64编码结果的缓冲区大小，以字节为单位。当raw_data_len <= 0 时，返回值为 0
 */
unsigned int calcBase64EncodeBufLen(unsigned int raw_data_len, bool newLine);

int encodeB64(const unsigned char *in, unsigned char *out, size_t len, bool newLine);

size_t decodeB64(const unsigned char *in, unsigned char *out, size_t len);

#ifdef __cplusplus
}
#endif
